[{"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/index.js":"1","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/App.js":"2","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/reportWebVitals.js":"3","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/Header.js":"4","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/Chat.js":"5","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/ChatInput.js":"6","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/ServerName.js":"7","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/date.js":"8","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/Channels.js":"9","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/ChannelInput.js":"10","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/main.js":"11"},{"size":500,"mtime":1608304616317,"results":"12","hashOfConfig":"13"},{"size":1914,"mtime":1608656158536,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1608216637116,"results":"15","hashOfConfig":"13"},{"size":403,"mtime":1608607465392,"results":"16","hashOfConfig":"13"},{"size":1097,"mtime":1608652645439,"results":"17","hashOfConfig":"13"},{"size":1289,"mtime":1608657160345,"results":"18","hashOfConfig":"13"},{"size":186,"mtime":1608310643055,"results":"19","hashOfConfig":"13"},{"size":606,"mtime":1608651546937,"results":"20","hashOfConfig":"13"},{"size":802,"mtime":1608656554857,"results":"21","hashOfConfig":"13"},{"size":665,"mtime":1608655372471,"results":"22","hashOfConfig":"13"},{"size":2124,"mtime":1608654458932,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1mmmi6v",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/index.js",[],["49","50"],"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/App.js",["51"],"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/reportWebVitals.js",[],"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/Header.js",["52"],"import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        const channelName = this.props.channelTabs.map(tab => {\n            if (tab.active) {\n                return tab.title;\n            }\n        })\n        return (\n            <div>\n                <h3 className='channel-name'>{channelName}</h3>\n            </div>\n        )\n    }\n}\n\nexport default Header;","/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/Chat.js",[],"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/ChatInput.js",[],"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/ServerName.js",[],"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/date.js",[],"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/Channels.js",["53","54","55","56"],"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/ChannelInput.js",[],"/Users/samleishman/Desktop/Projects/Unit-8-React/chat-app/src/main.js",["57"],"import { createStore } from 'redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { time } from './date.js'\n\nexport function reducer(state, action) {\n    if (action.type === 'ADD_MESSAGE') {\n        const messageToAdd = {\n            text: action.text,\n            timestamp: time,\n            id: uuidv4(),\n        }\n        const channelIndex = state.channels.findIndex(c => c.id === action.channelId)\n        const lastChannel = state.channels[channelIndex]\n        const newChannel = {\n            ...lastChannel,\n            messages: lastChannel.messages.concat(messageToAdd)\n        }\n        return {\n            ...state,\n            channels: [\n                ...state.channels.slice(0, channelIndex),\n                newChannel,\n                ...state.channels.slice(channelIndex + 1, state.channels.length)\n            ]\n        }\n    } else if (action.type === 'DELETE_MESSAGE') {\n        const channelIndex = state.channels.findIndex(\n            c => c.messages.find(message => (\n                message.id === action.id\n            ))\n        )\n        const lastChannel = state.channels[channelIndex]\n        const newChannel = {\n            ...lastChannel,\n            messages: lastChannel.messages.filter(message => (\n                message.id !== action.id\n            ))\n        }\n        return {\n            ...state,\n            channels: [\n                ...state.channels.slice(0, channelIndex),\n                newChannel,\n                ...state.channels.slice(channelIndex + 1, state.channels.length)\n            ]\n        }\n    } else {\n        return state;\n    }\n}\n\nexport const initialState = {\n    currentChannelId: '1-fca2',\n    channels: [\n        {\n            id: '1-fca2',\n            title: 'Test Channel 1',\n            messages: [\n                {\n                    text: 'Test',\n                    timestamp: time,\n                    id: uuidv4(),\n                },\n            ],\n        },\n        {\n            id: '2-be91',\n            title: 'Test Channel 2',\n            messages: [],\n        },\n    ],\n};\n\nexport const store = createStore(reducer, initialState);",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":11,"column":3,"nodeType":"64","messageId":"65","endLine":11,"endColumn":8},{"ruleId":"66","severity":1,"message":"67","line":5,"column":60,"nodeType":"68","messageId":"69","endLine":5,"endColumn":62},{"ruleId":"62","severity":1,"message":"70","line":2,"column":27,"nodeType":"64","messageId":"65","endLine":2,"endColumn":33},{"ruleId":"62","severity":1,"message":"71","line":2,"column":35,"nodeType":"64","messageId":"65","endLine":2,"endColumn":41},{"ruleId":"62","severity":1,"message":"63","line":2,"column":43,"nodeType":"64","messageId":"65","endLine":2,"endColumn":48},{"ruleId":"62","severity":1,"message":"72","line":2,"column":50,"nodeType":"64","messageId":"65","endLine":2,"endColumn":54},{"ruleId":"62","severity":1,"message":"73","line":3,"column":10,"nodeType":"64","messageId":"65","endLine":3,"endColumn":18},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Router' is defined but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","'fullDate' is defined but never used.","no-global-assign","no-unsafe-negation"]